ok lets suppose input is something like:- 
10
4 3 4 5 6

here we have 10 parathas to be made
and we have 4 cooks with rank 3,4,5,6.
here minimum rank is 3.

I am supposing you know the sum of first n natural numbers = (n*(n+1))/2
So, one of possible solution is to assign the total work of making parathas to the 
cook with rank=3, because he is fastest among them.

(This thing is written in question "For example if a cook is ranked 2..
he will cook one prata in 2 minutes one more prata in the next 4 mins an one more in the next 6 minutes 
hence in total 12 minutes he cooks 3 pratas" )

So, time taken by him to make all the parathas himself is 
  = 3*1 + 3*2 + 3*3 + 3*4 + 3*5 + .... + 3*10

so this thing is nothing but 3 * (10 * 11)/2 where 3 is rank and second term is sum of first 10 natural
numbers.

So that can also be written as :- minimum_rank * (parathas * (parathas+1))/2








#include <bits/stdc++.h>
using namespace std;
#define ll long long

ll minimum=INT_MAX;

bool isPossible(ll ranks[],ll cooks,ll mid,ll paratas) {
ll ans=0;
for(ll i=0;i<cooks;i++) {
ll temp=ranks[i];

    ll sum=0;
    ll j=1,counter=0;
    while(1) {
        sum=sum+temp*j;
        if(sum>mid) {
            break;
        }
        j++;
        counter++;
    }
    ans=ans+counter;
}

if(ans>=paratas) {
return true;
}

return false;
}

int main() {
int t;
cin >> t;

while(t--) {
    ll paratas;
    cin >> paratas;

    ll cooks;
    cin >> cooks;

    ll ranks[cooks]={0};
    ll least_rank=10;
    for(ll i=0;i<cooks;i++) {
        cin >> ranks[i];
        least_rank = min(least_rank, ranks[i]);
    }

    ll start=0,endd= (paratas * (paratas+1))/2 * least_rank;

    while(start<=endd) {
        ll mid=(start+endd)/2;
        bool checker=isPossible(ranks,cooks,mid,paratas);
        if(checker) {
            endd=mid-1;
            minimum=min(mid,minimum);
        }
        else {
            start=mid+1;
        }
    }
    cout << minimum << endl;
    minimum=INT_MAX;
}

return 0;
}